// Generated by ProtoGen, Version=2.3.0.277, Culture=neutral, PublicKeyToken=8fd7408b07f8d2cd.  DO NOT EDIT!

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Carbon.Engine.Network {
  
  public static partial class NetworkProtocol {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_network_Header__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Carbon.Engine.Network.Header, global::Carbon.Engine.Network.Header.Builder> internal__static_network_Header__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_network_Client__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Carbon.Engine.Network.Client, global::Carbon.Engine.Network.Client.Builder> internal__static_network_Client__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_network_Alive__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Carbon.Engine.Network.Alive, global::Carbon.Engine.Network.Alive.Builder> internal__static_network_Alive__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_network_Connect__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Carbon.Engine.Network.Connect, global::Carbon.Engine.Network.Connect.Builder> internal__static_network_Connect__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_network_Disconnect__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Carbon.Engine.Network.Disconnect, global::Carbon.Engine.Network.Disconnect.Builder> internal__static_network_Disconnect__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static NetworkProtocol() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "Cg1uZXR3b3JrLnByb3RvEgduZXR3b3JrGhRjc2hhcnBfb3B0aW9ucy5wcm90" + 
          "byKoAQoGSGVhZGVyEhIKAklkGAEgAigFOgY2NTY1NjUSEgoHVmVyc2lvbhgC" + 
          "IAIoBToBMRIyCgRUeXBlGAMgAigOMhsubmV0d29yay5IZWFkZXIuTWVzc2Fn" + 
          "ZVR5cGU6B1Vua25vd24iQgoLTWVzc2FnZVR5cGUSCwoHVW5rbm93bhAAEgkK" + 
          "BUFsaXZlEAESCwoHQ29ubmVjdBACEg4KCkRpc2Nvbm5lY3QQAyIlCgZDbGll" + 
          "bnQSCgoCaWQYASACKAwSDwoHdmVyc2lvbhgCIAIoBSIoCgVBbGl2ZRIfCgZj" + 
          "bGllbnQYASACKAsyDy5uZXR3b3JrLkNsaWVudCIqCgdDb25uZWN0Eh8KBmNs" + 
          "aWVudBgBIAIoCzIPLm5ldHdvcmsuQ2xpZW50Ii0KCkRpc2Nvbm5lY3QSHwoG" + 
          "Y2xpZW50GAEgAigLMg8ubmV0d29yay5DbGllbnRCLUgBwj4oChVDYXJib24u" + 
          "RW5naW5lLk5ldHdvcmsSD05ldHdvcmtQcm90b2NvbA==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_network_Header__Descriptor = Descriptor.MessageTypes[0];
        internal__static_network_Header__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Carbon.Engine.Network.Header, global::Carbon.Engine.Network.Header.Builder>(internal__static_network_Header__Descriptor,
                new string[] { "Id", "Version", "Type", });
        internal__static_network_Client__Descriptor = Descriptor.MessageTypes[1];
        internal__static_network_Client__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Carbon.Engine.Network.Client, global::Carbon.Engine.Network.Client.Builder>(internal__static_network_Client__Descriptor,
                new string[] { "Id", "Version", });
        internal__static_network_Alive__Descriptor = Descriptor.MessageTypes[2];
        internal__static_network_Alive__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Carbon.Engine.Network.Alive, global::Carbon.Engine.Network.Alive.Builder>(internal__static_network_Alive__Descriptor,
                new string[] { "Client", });
        internal__static_network_Connect__Descriptor = Descriptor.MessageTypes[3];
        internal__static_network_Connect__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Carbon.Engine.Network.Connect, global::Carbon.Engine.Network.Connect.Builder>(internal__static_network_Connect__Descriptor,
                new string[] { "Client", });
        internal__static_network_Disconnect__Descriptor = Descriptor.MessageTypes[4];
        internal__static_network_Disconnect__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Carbon.Engine.Network.Disconnect, global::Carbon.Engine.Network.Disconnect.Builder>(internal__static_network_Disconnect__Descriptor,
                new string[] { "Client", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::Google.ProtocolBuffers.DescriptorProtos.CSharpOptions.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::Google.ProtocolBuffers.DescriptorProtos.CSharpOptions.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  public sealed partial class Header : pb::GeneratedMessage<Header, Header.Builder> {
    private static readonly Header defaultInstance = new Builder().BuildPartial();
    public static Header DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Header DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override Header ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Carbon.Engine.Network.NetworkProtocol.internal__static_network_Header__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Header, Header.Builder> InternalFieldAccessors {
      get { return global::Carbon.Engine.Network.NetworkProtocol.internal__static_network_Header__FieldAccessorTable; }
    }
    
    #region Nested types
    public static class Types {
      public enum MessageType {
        Unknown = 0,
        Alive = 1,
        Connect = 2,
        Disconnect = 3,
      }
      
    }
    #endregion
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_ = 656565;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int VersionFieldNumber = 2;
    private bool hasVersion;
    private int version_ = 1;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public int Version {
      get { return version_; }
    }
    
    public const int TypeFieldNumber = 3;
    private bool hasType;
    private global::Carbon.Engine.Network.Header.Types.MessageType type_ = global::Carbon.Engine.Network.Header.Types.MessageType.Unknown;
    public bool HasType {
      get { return hasType; }
    }
    public global::Carbon.Engine.Network.Header.Types.MessageType Type {
      get { return type_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasVersion) return false;
        if (!hasType) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasId) {
        output.WriteInt32(1, Id);
      }
      if (HasVersion) {
        output.WriteInt32(2, Version);
      }
      if (HasType) {
        output.WriteEnum(3, (int) Type);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
        }
        if (HasVersion) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Version);
        }
        if (HasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(3, (int) Type);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Header ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Header ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Header ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Header ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Header ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Header ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Header ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Header ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Header ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Header ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Header prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<Header, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      Header result = new Header();
      
      protected override Header MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new Header();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Carbon.Engine.Network.Header.Descriptor; }
      }
      
      public override Header DefaultInstanceForType {
        get { return global::Carbon.Engine.Network.Header.DefaultInstance; }
      }
      
      public override Header BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        Header returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Header) {
          return MergeFrom((Header) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Header other) {
        if (other == global::Carbon.Engine.Network.Header.DefaultInstance) return this;
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasVersion) {
          Version = other.Version;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              Id = input.ReadInt32();
              break;
            }
            case 16: {
              Version = input.ReadInt32();
              break;
            }
            case 24: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::Carbon.Engine.Network.Header.Types.MessageType), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong) rawValue);
              } else {
                Type = (global::Carbon.Engine.Network.Header.Types.MessageType) rawValue;
              }
              break;
            }
          }
        }
      }
      
      
      public bool HasId {
        get { return result.HasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        result.hasId = false;
        result.id_ = 656565;
        return this;
      }
      
      public bool HasVersion {
        get { return result.HasVersion; }
      }
      public int Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(int value) {
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        result.hasVersion = false;
        result.version_ = 1;
        return this;
      }
      
      public bool HasType {
       get { return result.HasType; }
      }
      public global::Carbon.Engine.Network.Header.Types.MessageType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::Carbon.Engine.Network.Header.Types.MessageType value) {
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        result.hasType = false;
        result.type_ = global::Carbon.Engine.Network.Header.Types.MessageType.Unknown;
        return this;
      }
    }
    static Header() {
      object.ReferenceEquals(global::Carbon.Engine.Network.NetworkProtocol.Descriptor, null);
    }
  }
  
  public sealed partial class Client : pb::GeneratedMessage<Client, Client.Builder> {
    private static readonly Client defaultInstance = new Builder().BuildPartial();
    public static Client DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Client DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override Client ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Carbon.Engine.Network.NetworkProtocol.internal__static_network_Client__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Client, Client.Builder> InternalFieldAccessors {
      get { return global::Carbon.Engine.Network.NetworkProtocol.internal__static_network_Client__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private pb::ByteString id_ = pb::ByteString.Empty;
    public bool HasId {
      get { return hasId; }
    }
    public pb::ByteString Id {
      get { return id_; }
    }
    
    public const int VersionFieldNumber = 2;
    private bool hasVersion;
    private int version_ = 0;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public int Version {
      get { return version_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasVersion) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasId) {
        output.WriteBytes(1, Id);
      }
      if (HasVersion) {
        output.WriteInt32(2, Version);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasId) {
          size += pb::CodedOutputStream.ComputeBytesSize(1, Id);
        }
        if (HasVersion) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Version);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Client ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Client ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Client ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Client ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Client ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Client ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Client ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Client ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Client ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Client ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Client prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<Client, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      Client result = new Client();
      
      protected override Client MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new Client();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Carbon.Engine.Network.Client.Descriptor; }
      }
      
      public override Client DefaultInstanceForType {
        get { return global::Carbon.Engine.Network.Client.DefaultInstance; }
      }
      
      public override Client BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        Client returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Client) {
          return MergeFrom((Client) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Client other) {
        if (other == global::Carbon.Engine.Network.Client.DefaultInstance) return this;
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasVersion) {
          Version = other.Version;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              Id = input.ReadBytes();
              break;
            }
            case 16: {
              Version = input.ReadInt32();
              break;
            }
          }
        }
      }
      
      
      public bool HasId {
        get { return result.HasId; }
      }
      public pb::ByteString Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        result.hasId = false;
        result.id_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasVersion {
        get { return result.HasVersion; }
      }
      public int Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(int value) {
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        result.hasVersion = false;
        result.version_ = 0;
        return this;
      }
    }
    static Client() {
      object.ReferenceEquals(global::Carbon.Engine.Network.NetworkProtocol.Descriptor, null);
    }
  }
  
  public sealed partial class Alive : pb::GeneratedMessage<Alive, Alive.Builder> {
    private static readonly Alive defaultInstance = new Builder().BuildPartial();
    public static Alive DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Alive DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override Alive ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Carbon.Engine.Network.NetworkProtocol.internal__static_network_Alive__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Alive, Alive.Builder> InternalFieldAccessors {
      get { return global::Carbon.Engine.Network.NetworkProtocol.internal__static_network_Alive__FieldAccessorTable; }
    }
    
    public const int ClientFieldNumber = 1;
    private bool hasClient;
    private global::Carbon.Engine.Network.Client client_ = global::Carbon.Engine.Network.Client.DefaultInstance;
    public bool HasClient {
      get { return hasClient; }
    }
    public global::Carbon.Engine.Network.Client Client {
      get { return client_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasClient) return false;
        if (!Client.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasClient) {
        output.WriteMessage(1, Client);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasClient) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Client);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Alive ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Alive ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Alive ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Alive ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Alive ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Alive ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Alive ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Alive ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Alive ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Alive ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Alive prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<Alive, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      Alive result = new Alive();
      
      protected override Alive MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new Alive();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Carbon.Engine.Network.Alive.Descriptor; }
      }
      
      public override Alive DefaultInstanceForType {
        get { return global::Carbon.Engine.Network.Alive.DefaultInstance; }
      }
      
      public override Alive BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        Alive returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Alive) {
          return MergeFrom((Alive) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Alive other) {
        if (other == global::Carbon.Engine.Network.Alive.DefaultInstance) return this;
        if (other.HasClient) {
          MergeClient(other.Client);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::Carbon.Engine.Network.Client.Builder subBuilder = global::Carbon.Engine.Network.Client.CreateBuilder();
              if (HasClient) {
                subBuilder.MergeFrom(Client);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Client = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasClient {
       get { return result.HasClient; }
      }
      public global::Carbon.Engine.Network.Client Client {
        get { return result.Client; }
        set { SetClient(value); }
      }
      public Builder SetClient(global::Carbon.Engine.Network.Client value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasClient = true;
        result.client_ = value;
        return this;
      }
      public Builder SetClient(global::Carbon.Engine.Network.Client.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasClient = true;
        result.client_ = builderForValue.Build();
        return this;
      }
      public Builder MergeClient(global::Carbon.Engine.Network.Client value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasClient &&
            result.client_ != global::Carbon.Engine.Network.Client.DefaultInstance) {
            result.client_ = global::Carbon.Engine.Network.Client.CreateBuilder(result.client_).MergeFrom(value).BuildPartial();
        } else {
          result.client_ = value;
        }
        result.hasClient = true;
        return this;
      }
      public Builder ClearClient() {
        result.hasClient = false;
        result.client_ = global::Carbon.Engine.Network.Client.DefaultInstance;
        return this;
      }
    }
    static Alive() {
      object.ReferenceEquals(global::Carbon.Engine.Network.NetworkProtocol.Descriptor, null);
    }
  }
  
  public sealed partial class Connect : pb::GeneratedMessage<Connect, Connect.Builder> {
    private static readonly Connect defaultInstance = new Builder().BuildPartial();
    public static Connect DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Connect DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override Connect ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Carbon.Engine.Network.NetworkProtocol.internal__static_network_Connect__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Connect, Connect.Builder> InternalFieldAccessors {
      get { return global::Carbon.Engine.Network.NetworkProtocol.internal__static_network_Connect__FieldAccessorTable; }
    }
    
    public const int ClientFieldNumber = 1;
    private bool hasClient;
    private global::Carbon.Engine.Network.Client client_ = global::Carbon.Engine.Network.Client.DefaultInstance;
    public bool HasClient {
      get { return hasClient; }
    }
    public global::Carbon.Engine.Network.Client Client {
      get { return client_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasClient) return false;
        if (!Client.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasClient) {
        output.WriteMessage(1, Client);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasClient) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Client);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Connect ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Connect ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Connect ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Connect ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Connect ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Connect ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Connect ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Connect ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Connect ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Connect ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Connect prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<Connect, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      Connect result = new Connect();
      
      protected override Connect MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new Connect();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Carbon.Engine.Network.Connect.Descriptor; }
      }
      
      public override Connect DefaultInstanceForType {
        get { return global::Carbon.Engine.Network.Connect.DefaultInstance; }
      }
      
      public override Connect BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        Connect returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Connect) {
          return MergeFrom((Connect) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Connect other) {
        if (other == global::Carbon.Engine.Network.Connect.DefaultInstance) return this;
        if (other.HasClient) {
          MergeClient(other.Client);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::Carbon.Engine.Network.Client.Builder subBuilder = global::Carbon.Engine.Network.Client.CreateBuilder();
              if (HasClient) {
                subBuilder.MergeFrom(Client);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Client = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasClient {
       get { return result.HasClient; }
      }
      public global::Carbon.Engine.Network.Client Client {
        get { return result.Client; }
        set { SetClient(value); }
      }
      public Builder SetClient(global::Carbon.Engine.Network.Client value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasClient = true;
        result.client_ = value;
        return this;
      }
      public Builder SetClient(global::Carbon.Engine.Network.Client.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasClient = true;
        result.client_ = builderForValue.Build();
        return this;
      }
      public Builder MergeClient(global::Carbon.Engine.Network.Client value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasClient &&
            result.client_ != global::Carbon.Engine.Network.Client.DefaultInstance) {
            result.client_ = global::Carbon.Engine.Network.Client.CreateBuilder(result.client_).MergeFrom(value).BuildPartial();
        } else {
          result.client_ = value;
        }
        result.hasClient = true;
        return this;
      }
      public Builder ClearClient() {
        result.hasClient = false;
        result.client_ = global::Carbon.Engine.Network.Client.DefaultInstance;
        return this;
      }
    }
    static Connect() {
      object.ReferenceEquals(global::Carbon.Engine.Network.NetworkProtocol.Descriptor, null);
    }
  }
  
  public sealed partial class Disconnect : pb::GeneratedMessage<Disconnect, Disconnect.Builder> {
    private static readonly Disconnect defaultInstance = new Builder().BuildPartial();
    public static Disconnect DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Disconnect DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override Disconnect ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Carbon.Engine.Network.NetworkProtocol.internal__static_network_Disconnect__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Disconnect, Disconnect.Builder> InternalFieldAccessors {
      get { return global::Carbon.Engine.Network.NetworkProtocol.internal__static_network_Disconnect__FieldAccessorTable; }
    }
    
    public const int ClientFieldNumber = 1;
    private bool hasClient;
    private global::Carbon.Engine.Network.Client client_ = global::Carbon.Engine.Network.Client.DefaultInstance;
    public bool HasClient {
      get { return hasClient; }
    }
    public global::Carbon.Engine.Network.Client Client {
      get { return client_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasClient) return false;
        if (!Client.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasClient) {
        output.WriteMessage(1, Client);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasClient) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Client);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Disconnect ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Disconnect ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Disconnect ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Disconnect ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Disconnect ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Disconnect ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Disconnect ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Disconnect ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Disconnect ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Disconnect ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Disconnect prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<Disconnect, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      Disconnect result = new Disconnect();
      
      protected override Disconnect MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new Disconnect();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Carbon.Engine.Network.Disconnect.Descriptor; }
      }
      
      public override Disconnect DefaultInstanceForType {
        get { return global::Carbon.Engine.Network.Disconnect.DefaultInstance; }
      }
      
      public override Disconnect BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        Disconnect returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Disconnect) {
          return MergeFrom((Disconnect) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Disconnect other) {
        if (other == global::Carbon.Engine.Network.Disconnect.DefaultInstance) return this;
        if (other.HasClient) {
          MergeClient(other.Client);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::Carbon.Engine.Network.Client.Builder subBuilder = global::Carbon.Engine.Network.Client.CreateBuilder();
              if (HasClient) {
                subBuilder.MergeFrom(Client);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Client = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasClient {
       get { return result.HasClient; }
      }
      public global::Carbon.Engine.Network.Client Client {
        get { return result.Client; }
        set { SetClient(value); }
      }
      public Builder SetClient(global::Carbon.Engine.Network.Client value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasClient = true;
        result.client_ = value;
        return this;
      }
      public Builder SetClient(global::Carbon.Engine.Network.Client.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasClient = true;
        result.client_ = builderForValue.Build();
        return this;
      }
      public Builder MergeClient(global::Carbon.Engine.Network.Client value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasClient &&
            result.client_ != global::Carbon.Engine.Network.Client.DefaultInstance) {
            result.client_ = global::Carbon.Engine.Network.Client.CreateBuilder(result.client_).MergeFrom(value).BuildPartial();
        } else {
          result.client_ = value;
        }
        result.hasClient = true;
        return this;
      }
      public Builder ClearClient() {
        result.hasClient = false;
        result.client_ = global::Carbon.Engine.Network.Client.DefaultInstance;
        return this;
      }
    }
    static Disconnect() {
      object.ReferenceEquals(global::Carbon.Engine.Network.NetworkProtocol.Descriptor, null);
    }
  }
  
  #endregion
  
}
